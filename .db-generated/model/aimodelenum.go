//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type AiModelEnum string

const (
	AiModelEnum_Mistral     AiModelEnum = "Mistral"
	AiModelEnum_Gpt4o       AiModelEnum = "Gpt4o"
	AiModelEnum_Gemini15pro AiModelEnum = "Gemini1.5Pro"
	AiModelEnum_Gpt4mini    AiModelEnum = "GPT4Mini"
	AiModelEnum_Gpt35turbo  AiModelEnum = "Gpt3.5Turbo"
	AiModelEnum_Claude35    AiModelEnum = "Claude3.5"
)

func (e *AiModelEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "Mistral":
		*e = AiModelEnum_Mistral
	case "Gpt4o":
		*e = AiModelEnum_Gpt4o
	case "Gemini1.5Pro":
		*e = AiModelEnum_Gemini15pro
	case "GPT4Mini":
		*e = AiModelEnum_Gpt4mini
	case "Gpt3.5Turbo":
		*e = AiModelEnum_Gpt35turbo
	case "Claude3.5":
		*e = AiModelEnum_Claude35
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for AiModelEnum enum")
	}

	return nil
}

func (e AiModelEnum) String() string {
	return string(e)
}
