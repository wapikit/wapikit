//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ContactList = newContactListTable("public", "ContactList", "")

type contactListTable struct {
	postgres.Table

	// Columns
	UniqueId       postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	OrganizationId postgres.ColumnString
	Name           postgres.ColumnString
	Description    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactListTable struct {
	contactListTable

	EXCLUDED contactListTable
}

// AS creates new ContactListTable with assigned alias
func (a ContactListTable) AS(alias string) *ContactListTable {
	return newContactListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactListTable with assigned schema name
func (a ContactListTable) FromSchema(schemaName string) *ContactListTable {
	return newContactListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactListTable with assigned table prefix
func (a ContactListTable) WithPrefix(prefix string) *ContactListTable {
	return newContactListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactListTable with assigned table suffix
func (a ContactListTable) WithSuffix(suffix string) *ContactListTable {
	return newContactListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactListTable(schemaName, tableName, alias string) *ContactListTable {
	return &ContactListTable{
		contactListTable: newContactListTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newContactListTableImpl("", "excluded", ""),
	}
}

func newContactListTableImpl(schemaName, tableName, alias string) contactListTable {
	var (
		UniqueIdColumn       = postgres.StringColumn("UniqueId")
		CreatedAtColumn      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn      = postgres.TimestampzColumn("UpdatedAt")
		OrganizationIdColumn = postgres.StringColumn("OrganizationId")
		NameColumn           = postgres.StringColumn("Name")
		DescriptionColumn    = postgres.StringColumn("Description")
		allColumns           = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, NameColumn, DescriptionColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, NameColumn, DescriptionColumn}
	)

	return contactListTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:       UniqueIdColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		OrganizationId: OrganizationIdColumn,
		Name:           NameColumn,
		Description:    DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
