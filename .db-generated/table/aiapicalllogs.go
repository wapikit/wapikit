//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiApiCallLogs = newAiApiCallLogsTable("public", "AiApiCallLogs", "")

type aiApiCallLogsTable struct {
	postgres.Table

	// Columns
	UniqueId        postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz
	Request         postgres.ColumnString
	Response        postgres.ColumnString
	InputTokenUsed  postgres.ColumnInteger
	OutputTokenUsed postgres.ColumnInteger
	OrganizationId  postgres.ColumnString
	Model           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiApiCallLogsTable struct {
	aiApiCallLogsTable

	EXCLUDED aiApiCallLogsTable
}

// AS creates new AiApiCallLogsTable with assigned alias
func (a AiApiCallLogsTable) AS(alias string) *AiApiCallLogsTable {
	return newAiApiCallLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiApiCallLogsTable with assigned schema name
func (a AiApiCallLogsTable) FromSchema(schemaName string) *AiApiCallLogsTable {
	return newAiApiCallLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiApiCallLogsTable with assigned table prefix
func (a AiApiCallLogsTable) WithPrefix(prefix string) *AiApiCallLogsTable {
	return newAiApiCallLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiApiCallLogsTable with assigned table suffix
func (a AiApiCallLogsTable) WithSuffix(suffix string) *AiApiCallLogsTable {
	return newAiApiCallLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiApiCallLogsTable(schemaName, tableName, alias string) *AiApiCallLogsTable {
	return &AiApiCallLogsTable{
		aiApiCallLogsTable: newAiApiCallLogsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newAiApiCallLogsTableImpl("", "excluded", ""),
	}
}

func newAiApiCallLogsTableImpl(schemaName, tableName, alias string) aiApiCallLogsTable {
	var (
		UniqueIdColumn        = postgres.StringColumn("UniqueId")
		CreatedAtColumn       = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn       = postgres.TimestampzColumn("UpdatedAt")
		RequestColumn         = postgres.StringColumn("Request")
		ResponseColumn        = postgres.StringColumn("Response")
		InputTokenUsedColumn  = postgres.IntegerColumn("InputTokenUsed")
		OutputTokenUsedColumn = postgres.IntegerColumn("OutputTokenUsed")
		OrganizationIdColumn  = postgres.StringColumn("OrganizationId")
		ModelColumn           = postgres.StringColumn("Model")
		allColumns            = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, RequestColumn, ResponseColumn, InputTokenUsedColumn, OutputTokenUsedColumn, OrganizationIdColumn, ModelColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, RequestColumn, ResponseColumn, InputTokenUsedColumn, OutputTokenUsedColumn, OrganizationIdColumn, ModelColumn}
	)

	return aiApiCallLogsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:        UniqueIdColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		Request:         RequestColumn,
		Response:        ResponseColumn,
		InputTokenUsed:  InputTokenUsedColumn,
		OutputTokenUsed: OutputTokenUsedColumn,
		OrganizationId:  OrganizationIdColumn,
		Model:           ModelColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
